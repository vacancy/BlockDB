// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dbserver.proto

package blockdb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServerState struct {
	JsonIndex    int32 `protobuf:"varint,1,opt,name=JsonIndex" json:"JsonIndex,omitempty"`
	LastSnapshot int32 `protobuf:"varint,2,opt,name=LastSnapshot" json:"LastSnapshot,omitempty"`
}

func (m *ServerState) Reset()                    { *m = ServerState{} }
func (m *ServerState) String() string            { return proto.CompactTextString(m) }
func (*ServerState) ProtoMessage()               {}
func (*ServerState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ServerState) GetJsonIndex() int32 {
	if m != nil {
		return m.JsonIndex
	}
	return 0
}

func (m *ServerState) GetLastSnapshot() int32 {
	if m != nil {
		return m.LastSnapshot
	}
	return 0
}

type ServerSnapshot struct {
	Data map[string]int32 `protobuf:"bytes,1,rep,name=Data" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ServerSnapshot) Reset()                    { *m = ServerSnapshot{} }
func (m *ServerSnapshot) String() string            { return proto.CompactTextString(m) }
func (*ServerSnapshot) ProtoMessage()               {}
func (*ServerSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ServerSnapshot) GetData() map[string]int32 {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ServerState)(nil), "blockdb.ServerState")
	proto.RegisterType((*ServerSnapshot)(nil), "blockdb.ServerSnapshot")
}

func init() { proto.RegisterFile("dbserver.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x49, 0x2a, 0x4e,
	0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0xca, 0xc9, 0x4f,
	0xce, 0x4e, 0x49, 0x52, 0xf2, 0xe7, 0xe2, 0x0e, 0x06, 0x4b, 0x04, 0x97, 0x24, 0x96, 0xa4, 0x0a,
	0xc9, 0x70, 0x71, 0x7a, 0x15, 0xe7, 0xe7, 0x79, 0xe6, 0xa5, 0xa4, 0x56, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0xb0, 0x06, 0x21, 0x04, 0x84, 0x94, 0xb8, 0x78, 0x7c, 0x12, 0x8b, 0x4b, 0x82, 0xf3, 0x12,
	0x0b, 0x8a, 0x33, 0xf2, 0x4b, 0x24, 0x98, 0xc0, 0x0a, 0x50, 0xc4, 0x94, 0x1a, 0x18, 0xb9, 0xf8,
	0xa0, 0x26, 0x42, 0x85, 0x84, 0x4c, 0xb9, 0x58, 0x5c, 0x12, 0x4b, 0x12, 0x25, 0x18, 0x15, 0x98,
	0x35, 0xb8, 0x8d, 0x14, 0xf5, 0xa0, 0x76, 0xeb, 0xa1, 0x2a, 0xd3, 0x03, 0xa9, 0x71, 0xcd, 0x2b,
	0x29, 0xaa, 0x0c, 0x02, 0x2b, 0x97, 0x32, 0xe7, 0xe2, 0x84, 0x0b, 0x09, 0x09, 0x70, 0x31, 0x67,
	0xa7, 0x56, 0x82, 0x9d, 0xc4, 0x19, 0x04, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94,
	0xa6, 0x42, 0x5d, 0x01, 0xe1, 0x58, 0x31, 0x59, 0x30, 0x26, 0xb1, 0x81, 0xfd, 0x68, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x1c, 0x20, 0xbf, 0x38, 0xf5, 0x00, 0x00, 0x00,
}
